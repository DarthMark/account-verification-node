.step(data-title='Verify the One-Time Password', data-file="views/users/verify.jade", data-language='jade')
  :markdown
    ### User Story: Verify the One-Time Password

    <blockquote>As a user, I want to enter the one-time password sent to my mobile phone from the authentication system before I complete the signup process.</blockquote>

    This story covers the next user-facing step of the verification process, where they enter the code we sent them to verify their possession of the phone number they gave us. Here's what needs to get done to complete this story:

    * Create a form to allow the user to enter the one-time password they were sent
    * Create routes and controllers to both display the form and handle the submission of the one-time password
    * Add an instance method to the `User` model to verify the one-time code that was entered using the Authy client

    The route definition in `controllers/router.js` is pretty much the same as the first story, so we'll skip that bit here. Let's begin instead with the verification form, which is created with the Jade code you see here.

.step(data-title="The Verification Form", data-file="views/users/verify.jade", data-highlight="13-18", data-language='jade')
  :markdown
    ### The Verification Form

    This page actually has two forms, but we'll focus on the first one first. It has only a single field for the verification code, which we'll submit to the server for validation.


.step(data-title='Verifying the Code: Controller', data-file='controllers/users.js', data-highlight='95-147')
  :markdown
    ### Verifying the Code: Controller

    This controller function handles the form submission. It's a little longer than the others, but it has a lot to do. It needs to:

    * Load a `User` model for the current verification request
    * Use an instance function on the model object to verify the code that was entered by the user
    * If the code entered was valid, flip a boolean flag on the user model to indicate the account was verified

    Let's look at the `User` model to check out the instance method that handles verifying the code with Authy next.


.step(data-title='Verifying the Code: Model', data-file='models/User.js', data-highlight='103-109')
  :markdown
    ### Verifying the Code: Model

    This instance function is a thin wrapper around the Authy client function that sends in a candidate password to be verified. We call Authy, and then immediately call a passed callback function with the result.

    That's all for this story! However, our verification form wouldn't be very usable if there wasn't a way to resend a verification code if the message didn't arrive at the end user's handset for whatever reason.  Let's tackle the user story to resend the code next.