.step(data-title='Confirm Account Creation', data-file="controllers/users.js")
  :markdown
    ### User Story: Confirm Account Creation

    <blockquote>As a user, I want to view a success page and receive a text message indicating that my account has been created successfully.</blockquote>

    This story completes the account verification use case by indicating to the user that their account has been created and verified successfully. To implement this story, we need to:

    * Display a page that indicates that the user account has been created and verified successfully
    * Send a text message to the user's phone indicating their account has been verified

    Let's begin by looking at the controller.

.step(data-title="Show User Details Page", data-file="controllers/users.js", data-highlight="149-167")
  :markdown
    ### Show User Details Page

    This controller function renders a Jade template that contains the user's full name, and indicates whether or not they are verified by checking the user's `verified` property.

    This should suffice for confirmation in the browser that the user has been verified. Let's see how we might send that text message next.

.step(data-title='Configuring Twilio', data-file='config.js', data-highlight='10-22')
  :markdown
    ### Configuring Twilio

    Authy is awesome for abstracting SMS and handling 2FA and account verification, but we can't use it to send arbitrary text messages. Let's use the Twilio API directly to do that!

    But first, we need to configure out Twilio account. We'll need three things:

    * Our Twilio account SID
    * Our Twilio auth token
    * A Twilio number in our account that can send text messages

    After including these values in our app's config file, we're ready to move into the `User` model and create an instance function to send a message to the user's phone.

.step(data-title='Sending a Message: Creating a Twilio Client', data-file='models/User.js', data-highlight='3-7')
  :markdown
    ### Sending a Message: Creating a Twilio Client

    Much as we did for our Authy client, we create a single instance of the Twilio REST API helper that all instances of our `User` model can use.

.step(data-title='Sending a Message: Using the Twilio Client', data-file='models/User.js', data-highlight='111-121')
  :markdown
    ### Sending a Message: Using the Twilio Client

    Here, we add another instance function to the model that will send a text message to the user's configured phone number. Rather than just being a one-time password, this can be anything we wish.

    Let's finish up in the controller, where we actually use this functionality.

.step(data-title='Sending a Message: Updating the Controller', data-file='controllers/users.js', data-highlight='121-140')
  :markdown
    ### Sending a Message: Updating the Controller

    In the controller, after a new user has been successfully verified, we use `sendMessage` to deliver them the happy news! 

    ### All Done

    And with that, we've implemented account verification in our Node.js application! Be sure to check out the project buttons above to download the source for this application, view it on GitHub, or deploy it to Heroku to see it in action for yourself.

    We'd also love to hear your feedback on this tutorial - [please reach out to us](mailto:help@twilio.com) with any questions you might have.  Thanks for checking out the tutorial!